/*******************************************************************************
 * Copyright (c) 2011, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * @header          clang-warnings.h
 * @copyright       (c) 2011, eosgarden
 * @author          Jean-David Gadina <macmade@eosgarden.net>
 * @description     -Wall
 *                  -Wbad-function-cast
 *                  -Wcast-align
 *                  -Wconversion
 *                  -Wdeclaration-after-statement
 *                  -Wdeprecated-implementations
 *                  -Wextra
 *                  -Wfloat-equal
 *                  -Wformat=2
 *                  -Wformat-nonliteral
 *                  -Wfour-char-constants
 *                  -Wimplicit-atomic-properties
 *                  -Wmissing-braces
 *                  -Wmissing-declarations
 *                  -Wmissing-field-initializers
 *                  -Wmissing-format-attribute
 *                  -Wmissing-noreturn
 *                  -Wmissing-prototypes
 *                  -Wnested-externs
 *                  -Wnewline-eof
 *                  -Wold-style-definition
 *                  -Woverlength-strings
 *                  -Wparentheses
 *                  -Wpointer-arith
 *                  -Wredundant-decls
 *                  -Wreturn-type
 *                  -Wsequence-point
 *                  -Wshadow
 *                  -Wshorten-64-to-32
 *                  -Wsign-compare
 *                  -Wsign-conversion
 *                  -Wstrict-prototypes
 *                  -Wstrict-selector-match
 *                  -Wswitch
 *                  -Wswitch-default
 *                  -Wswitch-enum
 *                  -Wundeclared-selector
 *                  -Wuninitialized
 *                  -Wunknown-pragmas
 *                  -Wunreachable-code
 *                  -Wunused-function
 *                  -Wunused-label
 *                  -Wunused-parameter
 *                  -Wunused-value
 *                  -Wunused-variable
 *                  -Wwrite-strings
 */

#ifndef EOS_CLANG_WARNINGS_H
#define EOS_CLANG_WARNINGS_H

#ifndef __clang__

#error "Please consider using Clang as compiler!"

#else

/*
 * This enables all the warnings about constructions that some users consider
 * questionable, and that are easy to avoid (or modify to prevent the warning),
 * even in conjunction with macros.  This also enables some language-specific
 * warnings described in C++ Dialect Options and Objective-C and Objective-C++
 * Dialect Options.
 */
#pragma clang diagnostic fatal "-Wall"

/* 
 * Warn whenever a function call is cast to a non-matching type.  For example,
 * warn if "int malloc()" is cast to "anything *".
 */
#pragma clang diagnostic fatal "-Wbad-function-cast"

/*
 * Warn whenever a pointer is cast such that the required alignment of the
 * target is increased.  For example, warn if a "char *" is cast to an "int *"
 * on machines where integers can only be accessed at two- or four-byte
 * boundaries.
 */
#pragma clang diagnostic fatal "-Wcast-align"

/*
 * Warn if a prototype causes a type conversion that is different from what
 * would happen to the same argument in the absence of a prototype. This
 * includes conversions of fixed point to floating and vice versa, and
 * conversions changing the width or signedness of a fixed point argument except
 * when the same as the default promotion.
 * 
 * Also, warn if a negative integer constant expression is implicitly converted
 * to an unsigned type.  For example, warn about the assignment "x = -1" if "x"
 * is unsigned.
 * But do not warn about explicit casts like "(unsigned) -1".
 */
#pragma clang diagnostic fatal "-Wconversion"

/* 
 * Warn when a declaration is found after a statement in a block.  This
 * construct, known from C++, was introduced with ISO C99 and is by default
 * allowed in GCC.  It is not supported by ISO C90 and was not supported by GCC
 * versions before GCC 3.0.
 */
#pragma clang diagnostic fatal "-Wdeclaration-after-statement"

/*
 * Warn if method for a deprecated method is implemented, if class for a
 * deprecated class is implemented, if category for a deprecated class is
 * implemented.
 */
#pragma clang diagnostic fatal "-Wdeprecated-implementations"

/* 
 * Print extra warning messages.
 */
#pragma clang diagnostic fatal "-Wextra"

/* 
 * Warn if floating point values are used in equality comparisons.
 * 
 * The idea behind this is that sometimes it is convenient (for the programmer)
 * to consider floating-point values as approximations to infinitely precise
 * real numbers.  If you are doing this, then you need to compute (by analyzing
 * the code, or in some other way) the maximum or likely maximum error that the
 * computation introduces, and allow for it when performing comparisons (and
 * when producing output, but that's a different problem).  In particular,
 * instead of testing for equality, you would check to see whether the two
 * values have ranges that overlap; and this is done with the relational
 * operators, so equality comparisons are probably mistaken.
 */
#pragma clang diagnostic fatal "-Wfloat-equal"

/*
 * Enable -Wformat plus format checks not included in -Wformat. Currently
 * equivalent to -Wformat -Wformat-nonliteral -Wformat-security -Wformat-y2k.
 */
#pragma clang diagnostic fatal "-Wformat=2"

/*
 * If -Wformat is specified, also warn if the format string is not a string
 * literal and so cannot be checked, unless the format function takes its format
 * arguments as a "va_list".
 */
#pragma clang diagnostic fatal "-Wformat-nonliteral"

/*
 * Warn about four char constants, e.g. OSType 'APPL'.
 */
#pragma clang diagnostic fatal "-Wfour-char-constants"

/*
 * Warn when synthesizing a property which is implicitly atomic.
 */
#pragma clang diagnostic fatal "-Wimplicit-atomic-properties"

/*
 * Warn if an aggregate or union initializer is not fully bracketed.
 */
#pragma clang diagnostic fatal "-Wmissing-braces"

/*
 * Warn if a global function is defined without a previous declaration.
 * Do so even if the definition itself provides a prototype.
 * Use this option to detect global functions that are not declared in header
 * files.
 */
#pragma clang diagnostic fatal "-Wmissing-declarations"

/*
 * Warn if a structure's initializer has some fields missing.
 */
#pragma clang diagnostic fatal "-Wmissing-field-initializers"

/*
 * Warn about function pointers which might be candidates for "format"
 * attributes.  Note these are only possible candidates, not absolute ones.
 * GCC will guess that function pointers with "format" attributes that are used
 * in assignment, initialization, parameter passing or return statements should
 * have a corresponding "format" attribute in the resulting type.
 * I.e. the left-hand side of the assignment or initialization, the type of the
 * parameter variable, or the return type of the containing function
 * respectively should also have a "format" attribute to avoid the warning.
 * 
 * GCC will also warn about function definitions which might be candidates for
 * "format" attributes.  Again, these are only possible candidates.
 * GCC will guess that "format" attributes might be appropriate for any function
 * that calls a function like "vprintf" or "vscanf", but this might not always
 * be the case, and some functions for which "format" attributes are appropriate
 * may not be detected.
 */
#pragma clang diagnostic fatal "-Wmissing-format-attribute"

/*
 * Warn about functions which might be candidates for attribute "noreturn".
 * Note these are only possible candidates, not absolute ones.
 * Care should be taken to manually verify functions actually do not ever return
 * before adding the "noreturn" attribute, otherwise subtle code generation bugs
 * could be introduced. You will not get a warning for "main" in hosted C
 * environments.
 */
#pragma clang diagnostic fatal "-Wmissing-noreturn"

/*
 * Warn if a global function is defined without a previous prototype
 * declaration. This warning is issued even if the definition itself provides
 * a prototype. The aim is to detect global functions that fail to be declared
 * in header files.
 */
#pragma clang diagnostic fatal "-Wmissing-prototypes"

/*
 * Warn if an "extern" declaration is encountered within a function.
 */
#pragma clang diagnostic fatal "-Wnested-externs"

/*
 * Warn about files missing a newline at the end of the file.
 */
#pragma clang diagnostic fatal "-Wnewline-eof"

/*
 * Warn if an old-style function definition is used.  A warning is given even if
 * there is a previous prototype.
 */
#pragma clang diagnostic fatal "-Wold-style-definition"

/*
 * Warn about string constants which are longer than the "minimum maximum"
 * length specified in the C standard.	Modern compilers generally allow string
 * constants which are much longer than the standard's minimum limit, but very
 * portable programs should avoid using longer strings.
 * 
 * The limit applies after string constant concatenation, and does not count the
 * trailing NUL. In C89, the limit was 509 characters; in C99, it was raised to
 * 4095. C++98 does not specify a normative minimum maximum, so we do not
 * diagnose overlength strings in C++.
 * 
 * This option is implied by -pedantic, and can be disabled with
 * -Wno-overlength-strings.
 */
#pragma clang diagnostic fatal "-Woverlength-strings"

/*
 * Warn if parentheses are omitted in certain contexts, such as when there is an
 * assignment in a context where a truth value is expected, or when operators
 * are nested whose precedence people often get confused about. Only the warning
 * for an assignment used as a truth value is supported when compiling C++;
 * the other warnings are only supported when compiling C.
 * 
 * Also warn if a comparison like x<=y<=z appears; this is equivalent to
 * (x<=y ? 1 : 0) <= z, which is a different interpretation from that of
 * ordinary mathematical notation.
 */
#pragma clang diagnostic fatal "-Wparentheses"

/*
 * Warn about anything that depends on the "size of" a function type or of
 * "void". GNU C assigns these types a size of 1, for convenience in
 * calculations with "void *" pointers and pointers to functions.
 */
#pragma clang diagnostic fatal "-Wpointer-arith"

/*
 * Warn if anything is declared more than once in the same scope, even in cases
 * where multiple declaration is valid and changes nothing.
 */
#pragma clang diagnostic fatal "-Wredundant-decls"

/*
 * Warn whenever a function is defined with a return-type that defaults to
 * "int".  Also warn about any "return" statement with no return-value in a
 * function whose return-type is not "void".
 * 
 * For C, also warn if the return type of a function has a type qualifier such
 * as "const".  Such a type qualifier has no effect, since the value returned by
 * a function is not an lvalue.  ISO C prohibits qualified "void" return types
 * on function definitions, so such return types always receive a warning even
 * without this option.
 * 
 * For C++, a function without return type always produces a diagnostic message,
 * even when -Wno-return-type is specified.  The only exceptions are main and
 * functions defined in system headers.
 */
#pragma clang diagnostic fatal "-Wreturn-type"

/*
 * Warn about code that may have undefined semantics because of violations of
 * sequence point rules in the C and C++ standards.
 * 
 * The C and C++ standards defines the order in which expressions in a C/C++
 * program are evaluated in terms of sequence points, which represent a partial
 * ordering between the execution of parts of the program: those executed before
 * the sequence point, and those executed after it.  These occur after the
 * evaluation of a full expression (one which is not part of a larger
 * expression), after the evaluation of the first operand of a "&&", "||", "? :"
 * or "," (comma) operator, before a function is called (but after the
 * evaluation of its arguments and the expression denoting the called function),
 * and in certain other places.  Other than as expressed by the sequence point
 * rules, the order of evaluation of subexpressions of an expression is not
 * specified.	All these rules describe only a partial order rather than a
 * total order, since, for example, if two functions are called within one
 * expression with no sequence point between them, the order in which the
 * functions are called is not specified.  However, the standards committee have
 * ruled that function calls do not overlap.
 */
#pragma clang diagnostic fatal "-Wsequence-point"

/*
 * Warn whenever a local variable shadows another local variable, parameter or
 * global variable or whenever a built-in function is shadowed.
 */
#pragma clang diagnostic fatal "-Wshadow"

/*
 * Warn if a value is implicitly converted from a 64 bit type to a 32 bit type.
 */
#pragma clang diagnostic fatal "-Wshorten-64-to-32"

/*
 * Warn when a comparison between signed and unsigned values could produce an
 * incorrect result when the signed value is converted to unsigned.
 * This warning is also enabled by -Wextra; to get the other warnings of -Wextra
 * without this warning, use -Wextra -Wno-sign-compare
 */
#pragma clang diagnostic fatal "-Wsign-compare"

/*
 * Warn for implicit conversions that may change the sign of an integer value,
 * like assigning a signed integer expression to an unsigned integer variable.
 * An explicit cast silences the warning. In C, this option is enabled also by
 * -Wconversion.
 */
#pragma clang diagnostic fatal "-Wsign-conversion"

/*
 * Warn if a function is declared or defined without specifying the argument
 * types. (An old-style function definition is permitted without a warning if
 * preceded by a declaration which specifies the argument types.)
 */
#pragma clang diagnostic fatal "-Wstrict-prototypes"

/*
 * Warn if multiple methods with differing argument and/or return types are
 * found for a given selector when attempting to send a message using this
 * selector to a receiver of type "id" or "Class".  When this flag is off
 * (which is the default behavior), the compiler will omit such warnings if any
 * differences found are confined to types which share the same size and
 * alignment.
 */
#pragma clang diagnostic fatal "-Wstrict-selector-match"

/*
 * Warn whenever a "switch" statement has an index of enumerated type and lacks
 * a "case" for one or more of the named codes of that enumeration.
 * (The presence of a "default" label prevents this warning.)
 * "case" labels outside the enumeration range also provoke warnings when this
 * option is used.  This warning is enabled by -Wall.
 */
#pragma clang diagnostic fatal "-Wswitch"

/*
 * Warn whenever a "switch" statement does not have a "default" case.
 */
#pragma clang diagnostic fatal "-Wswitch-default"

/*
 * Warn whenever a "switch" statement has an index of enumerated type and lacks
 * a "case" for one or more of the named codes of that enumeration.  "case"
 * labels outside the enumeration range also provoke warnings when this option
 * is used.
 */
#pragma clang diagnostic fatal "-Wswitch-enum"

/*
 * Warn if a "@selector(...)" expression referring to an undeclared selector is
 * found.	A selector is considered undeclared if no method with that name has
 * been declared before the "@selector(...)" expression, either explicitly in an
 * @interface or @protocol declaration, or implicitly in an @implementation
 * section.  This option always performs its checks as soon as a
 * "@selector(...)" expression is found, while -Wselector only performs its
 * checks in the final stage of compilation. This also enforces the coding style
 * convention that methods and selectors must be declared before being used.
 */
#pragma clang diagnostic fatal "-Wundeclared-selector"

/*
 * Warn if an automatic variable is used without first being initialized or if a
 * variable may be clobbered by a "setjmp" call.
 * 
 * These warnings are possible only in optimizing compilation, because they
 * require data flow information that is computed only when optimizing.
 * If you do not specify -O, you will not get these warnings. Instead, GCC will
 * issue a warning about -Wuninitialized requiring -O.
 * 
 * If you want to warn about code which uses the uninitialized value of the
 * variable in its own initializer, use the -Winit-self option.
 * 
 * These warnings occur for individual uninitialized or clobbered elements of
 * structure, union or array variables as well as for variables which are
 * uninitialized or clobbered as a whole.  They do not occur for variables or
 * elements declared "volatile".  Because these warnings depend on optimization,
 * the exact variables or elements for which there are warnings will depend on
 * the precise optimization options and version of GCC used.
 * 
 * Note that there may be no warning about a variable that is used only to
 * compute a value that itself is never used, because such computations may be
 * deleted by data flow analysis before the warnings are printed.
 * 
 * These warnings are made optional because GCC is not smart enough to see all
 * the reasons why the code might be correct despite appearing to have an error.
 */
#pragma clang diagnostic fatal "-Wuninitialized"

/*
 * Warn when a #pragma directive is encountered which is not understood by GCC.
 * If this command line option is used, warnings will even be issued for unknown
 * pragmas in system header files.  This is not the case if the warnings were
 * only enabled by the -Wall command line option.
 */
#pragma clang diagnostic fatal "-Wunknown-pragmas"

/*
 * Warn if the compiler detects that code will never be executed.
 * 
 * This option is intended to warn when the compiler detects that at least a
 * whole line of source code will never be executed, because some condition is
 * never satisfied or because it is after a procedure that never returns.
 * 
 * It is possible for this option to produce a warning even though there are
 * circumstances under which part of the affected line can be executed, so care
 * should be taken when removing apparently-unreachable code.
 * 
 * For instance, when a function is inlined, a warning may mean that the line is
 * unreachable in only one inlined copy of the function.
 * 
 * This option is not made part of -Wall because in a debugging version of a
 * program there is often substantial code which checks correct functioning of
 * the program and is, hopefully, unreachable because the program does work.
 * Another common use of unreachable code is to provide behavior which is
 * selectable at compile-time.
 */
#pragma clang diagnostic fatal "-Wunreachable-code"

/*
 * Warn whenever a static function is declared but not defined or a non-inline
 * static function is unused. This warning is enabled by -Wall.
 */
#pragma clang diagnostic fatal "-Wunused-function"

/*
 * Warn whenever a label is declared but not used.
 * This warning is enabled by -Wall.
 * 
 * To suppress this warning use the unused attribute.
 */
#pragma clang diagnostic fatal "-Wunused-label"

/*
 * Warn whenever a function parameter is unused aside from its declaration.
 * 
 * To suppress this warning use the unused attribute.
 */
#pragma clang diagnostic fatal "-Wunused-parameter"

/*
 * Warn whenever a statement computes a result that is explicitly not used.
 * This warning is enabled by -Wall.
 * 
 * To suppress this warning cast the expression to void.
 */
#pragma clang diagnostic fatal "-Wunused-value"

/*
 * Warn whenever a local variable or non-constant static variable is unused
 * aside from its declaration.  This warning is enabled by -Wall.
 * 
 * To suppress this warning use the unused attribute.
 */
#pragma clang diagnostic fatal "-Wunused-variable"

/*
 * When compiling C, give string constants the type "const char[length]" so that
 * copying the address of one into a non-"const" "char *" pointer will get a
 * warning; when compiling C++, warn about the deprecated conversion from string
 * literals to "char *".  This warning, by default, is enabled for C++ programs.
 * These warnings will help you find at compile time code that can try to write
 * into a string constant, but only if you have been very careful about using
 * "const" in declarations and prototypes.
 * Otherwise, it will just be a nuisance; this is why we did not make -Wall
 * request these warnings.
 */
#pragma clang diagnostic fatal "-Wwrite-strings"

#endif

#endif /* EOS_CLANG_WARNINGS_H */
